//
// Styleguide view stuff
//

// Basic functions must be loaded before settings to be able to use them from
// settings and objects
@import "./tools/rem";
@import "./tools/colors";

// Load project settings
@import "./settings/site";
@import "./settings/palette";
@import "./settings/theme";


// Draw a background grid in pure CSS
@mixin draw-grid($line-color: null, $border-color: null) {
    @if $line-color {
        background: linear-gradient(
                -90deg,
                $line-color $onepixel,
                transparent $onepixel
            ),
            linear-gradient($line-color $onepixel, transparent $onepixel),
            linear-gradient(-90deg, $line-color $onepixel, transparent $onepixel),
            linear-gradient($line-color $onepixel, transparent $onepixel),
            linear-gradient(
                transparent 0.1875rem,
                transparent 0.1875rem,
                transparent 4.875rem,
                transparent 4.875rem
            ),
            linear-gradient(-90deg, transparent $onepixel, transparent $onepixel),
            linear-gradient(
                -90deg,
                transparent 0.1875rem,
                transparent 0.1875rem,
                transparent 4.875rem,
                transparent 4.875rem
            ),
            linear-gradient(transparent $onepixel, transparent $onepixel), transparent;
    }
    background-size: 0.625rem 0.625rem, 0.625rem 0.625rem, 0.625rem 0.625rem,
        0.625rem 0.625rem, 0.625rem 0.625rem, 0.625rem 0.625rem, 0.625rem 0.625rem,
        0.625rem 0.625rem;
    @if $border-color {
        border: $onepixel solid $border-color;
    }
}

.styleguide {
    // A basic panel which include a visual grid
    &__pane-grid {
        @include draw-grid(
            $line-color: $silver,
            $border-color: $warm-grey
        );
    }

    // Let browser split the rows on two columns
    &__text-columns {
        column-count: 2;
        column-gap: 2rem;
    }

    .palette {
        $palette-sel: nth(nth(&, 1), 2);

        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        color: inherit;

        &__item,
        &__gradient {
            flex: 1 0 20%;
            max-width: 20%;
            padding: 0.5rem;
        }

        &__color {
            display: block;
            width: 100%;
            height: 3rem;
        }

        &__link {
            position: relative;

            &::after {
                content: "\21b5";
                position: absolute;
                padding: 0.3rem;
                display: block;
                bottom: 0;
                right: 0;
                color: $dark;
                line-height: 1;
                background: rgba($white, 0.4);
                border-top-left-radius: 0.5rem;
            }
        }

        // Iterate through color palette to build a modifier which define
        // values for each color
        @each $key, $value in $palette {
            &__item--#{$key} {
                #{$palette-sel}__color {
                    background-color: $value;
                }
            }
        }
    }

    // A section block element for content with explicitely defined color
    // properties for children elements and some spacing
    &__block {
        padding: 2rem;

        // Color variant modifiers class names following color schemes
        @each $name, $scheme in $sv-colors-schemes {
            &--#{$name} {
                @include sv-scheme-colors($scheme);
            }
        }
    }
}

// Some debug to output variables to quickly update styleguide
// settings
/*@debug "---------------";
@debug "theme schemes:";
@debug map-keys(map-get($r-theme, "base-schemes"));

@debug "---------------";
@debug "$palette:";
@debug map-keys($palette);

@debug "---------------";
@debug "$gradient-colors:";
@debug map-keys($gradient-colors);

@debug "---------------";*/
